{
  "id": 17,
  "title": "סיבוכיות מקום (Space Complexity)",
  "theoryHTML": "<h2>מהי סיבוכיות מקום?</h2><p>סיבוכיות מקום מתארת כמה זיכרון התוכנית שלנו צורכת בזמן הריצה. בדיוק כמו שזמן ריצה חשוב כדי להבין אם הקוד יעבוד מהר, גם שימוש בזיכרון חשוב כדי להבין אם הקוד שלנו בכלל יוכל לרוץ על מחשב אמיתי.</p><h3>למה זה חשוב?</h3><p>תוכנית יכולה לרוץ מהר אבל להשתמש בכמות ענקית של זיכרון – ואז המחשב פשוט יתקע. לכן אנחנו לומדים לחשוב גם על מקום, לא רק על זמן.</p><h3>מה משפיע על סיבוכיות מקום?</h3><ul><li>משתנים – כל משתנה תופס זיכרון.</li><li>רשימות או מבני נתונים – ככל שהם גדולים יותר, הם תופסים יותר מקום.</li><li>קריאות רקורסיביות – כל קריאה לפונקציה מוסיפה מסגרת (stack frame) לזיכרון.</li></ul><h3>סדרי גודל נפוצים</h3><ul><li><b>O(1)</b> – שימוש קבוע בזיכרון, ללא קשר לגודל הנתונים.</li><li><b>O(n)</b> – שימוש בזיכרון שגדל בהתאם לגודל הקלט.</li><li><b>O(n^2)</b> – שימוש בזיכרון שמכפיל את עצמו בלולאות מקוננות עם מבני נתונים.</li></ul><h3>דוגמה</h3><pre style='direction:ltr; text-align:left;'><code># שמירה של רשימה באורך n\nnums = [0] * 1000\n# הרשימה תופסת מקום בקנה מידה של O(n)</code></pre><p>שימו לב – גם אם האלגוריתם מהיר מאוד, שימוש בזיכרון גדול עלול למנוע את ריצתו.</p><h3>סיכום</h3><p>כשאנחנו מתכננים אלגוריתם, נחשב גם זמן וגם מקום. לעיתים כדאי להשתמש ביותר זמן אבל פחות זיכרון, או ההפך – תלוי בצורך.</p>",
  "examples": [
    "### שימוש בזיכרון קבוע O(1)",
    "<pre style='direction:ltr; text-align:left;'><code># שימוש במשתנים בודדים\na = 5\nb = 10\nc = a + b\nprint(c)\n# מספר קבוע של משתנים – O(1)</code></pre>",

    "### שימוש בזיכרון ליניארי O(n)",
    "<pre style='direction:ltr; text-align:left;'><code># יצירת רשימה באורך n\nn = 5\nnums = [i for i in range(n)]\nprint(nums)\n# ככל ש-n גדל, כמות הזיכרון גדלה – O(n)</code></pre>",

    "### שימוש בזיכרון ריבועי O(n^2)",
    "<pre style='direction:ltr; text-align:left;'><code># יצירת מטריצה בגודל n על n\nn = 3\nmatrix = [[0]*n for _ in range(n)]\nprint(matrix)\n# מספר התאים הוא n^2 – O(n^2)</code></pre>",

    "### רקורסיה והשפעתה על הזיכרון",
    "<pre style='direction:ltr; text-align:left;'><code># כל קריאה לפונקציה מוסיפה מקום ל-stack\ndef countdown(n):\n    if n == 0:\n        return\n    print(n)\n    countdown(n-1)\n\ncountdown(5)\n# נדרשות 5 קריאות – O(n) בזיכרון</code></pre>"
  ],"exercises": [
  {
    "question": "תרגיל 1 – כתוב פונקציה שמחזירה את סכום שני מספרים בלבד. מה סיבוכיות המקום?",
    "solution": "def add(a, b):\n    return a + b\n\nprint(add(3, 5))\n# סיבוכיות מקום: O(1) – לא נדרש זיכרון נוסף מלבד למשתנים"
  },
  {
    "question": "תרגיל 2 – צור רשימה באורך n ומלא אותה באפסים. מה סיבוכיות המקום?",
    "solution": "def zeros_list(n):\n    return [0] * n\n\nprint(zeros_list(5))\n# סיבוכיות מקום: O(n) – הרשימה תופסת מקום יחסי לגודל n"
  },
  {
    "question": "תרגיל 3 – צור מטריצה בגודל n על n. מה סיבוכיות המקום?",
    "solution": "def matrix(n):\n    return [[0]*n for _ in range(n)]\n\nprint(matrix(3))\n# סיבוכיות מקום: O(n^2) – כל איבר תופס מקום"
  },
  {
    "question": "תרגיל 4 – כתוב פונקציה רקורסיבית שמדפיסה את המספרים מ-n עד 0. מה סיבוכיות המקום?",
    "solution": "def countdown(n):\n    if n < 0:\n        return\n    print(n)\n    countdown(n-1)\n\ncountdown(5)\n# סיבוכיות מקום: O(n) – בגלל קריאות רקורסיביות שמצטברות במחסנית"
  },
  {
    "question": "תרגיל 5 – כתוב פונקציה שמקבלת רשימה ומחזירה רשימה חדשה שבה כל מספר מוכפל ב-2. מה סיבוכיות המקום?",
    "solution": "def double_list(lst):\n    return [x*2 for x in lst]\n\nprint(double_list([1, 2, 3]))\n# סיבוכיות מקום: O(n) – נבנית רשימה חדשה"
  },
  {
    "question": "תרגיל 6 – כתוב פונקציה שמחזירה את הסכום של רשימה מבלי ליצור רשימה חדשה. מה סיבוכיות המקום?",
    "solution": "def sum_list(lst):\n    total = 0\n    for x in lst:\n        total += x\n    return total\n\nprint(sum_list([1, 2, 3, 4]))\n# סיבוכיות מקום: O(1) – אין שימוש במבנה נתונים נוסף"
  },
  {
    "question": "תרגיל 7 – השווה בין שמירת מספרים במבנה set לעומת רשימה. מה סיבוכיות המקום?",
    "solution": "nums_list = [1,2,3,4,5]\nnums_set = {1,2,3,4,5}\nprint(nums_list)\nprint(nums_set)\n# רשימה: O(n)\n# סט: O(n) – אך הסט דורש יותר מקום פנימי (hashing)"
  },
  {
    "question": "תרגיל 8 – כתוב פונקציה שמקבלת n ומחזירה מחרוזת בגודל n. מה סיבוכיות המקום?",
    "solution": "def make_string(n):\n    return \"a\" * n\n\nprint(make_string(5))\n# סיבוכיות מקום: O(n) – מחרוזת בגודל יחסי ל-n"
  },
  {
    "question": "תרגיל 9 – כתוב פונקציה שמייצרת את כל הזוגות האפשריים מתוך רשימה באורך n. מה סיבוכיות המקום?",
    "solution": "def all_pairs(lst):\n    pairs = []\n    for i in lst:\n        for j in lst:\n            pairs.append((i, j))\n    return pairs\n\nprint(all_pairs([1,2,3]))\n# סיבוכיות מקום: O(n^2) – כמות הזוגות גדלה בריבוע"
  },
  {
    "question": "תרגיל 10 – עבור n גדול מאוד, הסבר למה חשוב לשים לב גם לזמן וגם לזיכרון.",
    "solution": "# כש-n גדול:\n# אם האלגוריתם איטי (O(n^2)) – זמן הריצה ארוך.\n# אם הוא צורך הרבה זיכרון (O(n^2)) – המחשב עלול להיתקע.\n# לכן חשוב לאזן בין זמן ריצה לסיבוכיות מקום."
  }
]
,
  "quizzes": [
  {
    "title": "שאלון 1 – יסודות סיבוכיות מקום",
    "questions": [
      {
        "question": "מהי סיבוכיות מקום?",
        "options": ["כמות הזמן שהתוכנית צורכת", "כמות הזיכרון שהתוכנית צורכת בזמן ריצה", "מספר השורות בקוד", "כמות המשתנים הגלובליים"],
        "answer": 1
      },
      {
        "question": "למה חשוב להתייחס גם לסיבוכיות מקום?",
        "options": ["כי היא משפיעה על מהירות המסך", "כי תוכנית יכולה לרוץ מהר אבל להיתקע מחוסר זיכרון", "כי תמיד עדיף יותר זיכרון", "אין צורך"],
        "answer": 1
      },
      {
        "question": "מה משפיע על סיבוכיות מקום?",
        "options": ["משתנים, מבני נתונים, קריאות רקורסיביות", "רק מהירות המעבד", "מספר ההערות בקוד", "גרסת פייתון"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של שמירת מספר בודד במשתנה?",
        "options": ["O(1)", "O(n)", "O(n^2)", "תלוי בגודל הקלט"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של יצירת רשימה באורך n?",
        "options": ["O(1)", "O(n)", "O(n^2)", "O(log n)"],
        "answer": 1
      },
      {
        "question": "מהי סיבוכיות המקום של יצירת מטריצה בגודל n על n?",
        "options": ["O(n)", "O(n^2)", "O(1)", "O(log n)"],
        "answer": 1
      },
      {
        "question": "מהי ההשפעה של קריאה רקורסיבית על הזיכרון?",
        "options": ["כל קריאה מוסיפה מקום ל־stack", "אין השפעה", "היא מקטינה את הזיכרון", "היא מוחקת משתנים"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של פונקציה רקורסיבית countdown(n)?",
        "options": ["O(n)", "O(1)", "O(n^2)", "O(log n)"],
        "answer": 0
      },
      {
        "question": "מה הפלט של הקוד: nums = [0]*1000?",
        "options": ["רשימה של אלף אפסים", "מספר 1000", "שגיאה", "רשימה ריקה"],
        "answer": 0
      },
      {
        "question": "מהו היתרון של שימוש ב־O(1) זיכרון?",
        "options": ["תמיד משתמש באותה כמות זיכרון ללא קשר לקלט", "תמיד רץ מהר יותר", "מונע רקורסיה", "לא ניתן לשנות ערכים"],
        "answer": 0
      }
    ]
  },
  {
    "title": "שאלון 2 – יישומים והשוואות",
    "questions": [
      {
        "question": "מהי סיבוכיות המקום של יצירת מחרוזת בגודל n?",
        "options": ["O(n)", "O(1)", "O(n^2)", "O(log n)"],
        "answer": 0
      },
      {
        "question": "מה קורה לזיכרון בשימוש ברקורסיה עמוקה?",
        "options": ["הזיכרון גדל עם מספר הקריאות", "הזיכרון נשאר קבוע", "אין שימוש בזיכרון", "הזיכרון מתאפס"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של פונקציה שמחזירה את סכום שני מספרים?",
        "options": ["O(1)", "O(n)", "O(n^2)", "O(log n)"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של פונקציה שיוצרת רשימה חדשה שבה כל איבר מוכפל ב־2?",
        "options": ["O(n)", "O(1)", "O(n^2)", "תלוי בערכים"],
        "answer": 0
      },
      {
        "question": "מה ההבדל בין O(1) ל־O(n) מבחינת מקום?",
        "options": ["O(1) קבועה ללא קשר לגודל הקלט, O(n) גדלה עם הקלט", "O(1) תמיד מהירה יותר", "O(n) קטנה יותר", "אין הבדל"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של יצירת כל הזוגות האפשריים מתוך רשימה באורך n?",
        "options": ["O(n)", "O(n^2)", "O(1)", "O(log n)"],
        "answer": 1
      },
      {
        "question": "מה קורה אם אלגוריתם משתמש בהרבה זיכרון אבל מעט זמן?",
        "options": ["זה עלול לגרום לתקיעת המחשב", "זה תמיד עדיף", "זה מונע קריאות רקורסיביות", "זה הופך את הקוד לפשוט יותר"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של פונקציה שמחזירה את סכום איברי רשימה בלי ליצור רשימה חדשה?",
        "options": ["O(1)", "O(n)", "O(n^2)", "O(log n)"],
        "answer": 0
      },
      {
        "question": "מהי סיבוכיות המקום של שמירת מספרים ב־set לעומת רשימה?",
        "options": ["בשני המקרים O(n)", "ב־set תמיד קטן יותר", "ב־list תמיד קטן יותר", "O(1) בשני המקרים"],
        "answer": 0
      },
      {
        "question": "למה חשוב לשים לב גם לזמן וגם למקום?",
        "options": ["כי לפעמים עדיף יותר זמן אבל פחות זיכרון או להפך", "כי מקום לא חשוב", "כי זמן תמיד חשוב יותר", "כי אי אפשר להריץ קוד בלי זה"],
        "answer": 0
      }
    ]
  }
]

}
