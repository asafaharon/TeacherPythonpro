{
  "id": 18,
  "title": "חיפוש ליניארי וחיפוש בינארי",
  "theoryHTML": "<h2>מה זה חיפוש?</h2><p>חיפוש הוא פעולה בסיסית: למצוא איבר ברשימה. לדוגמה: האם המספר 7 נמצא ברשימה? או באיזה מקום ברשימה מופיעה המילה 'שלום'?</p><h3>חיפוש ליניארי</h3><p>חיפוש ליניארי עובר על הרשימה איבר אחרי איבר עד שמוצאים את מה שחיפשנו. אם הרשימה באורך n – ייתכן שנצטרך לבדוק את כל n האיברים.</p><pre style='direction:ltr; text-align:left;'><code>def linear_search(lst, target):\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return -1\n\nprint(linear_search([3,7,2,9],7))\n# פלט: 1 (כי 7 נמצא במקום השני)</code></pre><p>סיבוכיות זמן: O(n).</p><h3>חיפוש בינארי</h3><p>חיפוש בינארי עובד רק על רשימות ממוינות. במקום לבדוק איבר אחרי איבר, אנחנו בודקים את האיבר האמצעי: אם הוא גדול מדי – נחפש בחצי הראשון, אם קטן מדי – בחצי השני. כך בכל צעד חוצים את הרשימה לשניים.</p><pre style='direction:ltr; text-align:left;'><code>def binary_search(lst, target):\n    low, high = 0, len(lst)-1\n    while low <= high:\n        mid = (low+high)//2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            low = mid+1\n        else:\n            high = mid-1\n    return -1\n\nprint(binary_search([1,2,3,4,5,6,7,8,9],7))\n# פלט: 6</code></pre><p>סיבוכיות זמן: O(log n) – הרבה יותר מהיר!</p><h3>השוואה</h3><ul><li>חיפוש ליניארי – פשוט, עובד תמיד, אבל איטי ברשימות גדולות.</li><li>חיפוש בינארי – מהיר מאוד, אבל דורש שהרשימה תהיה ממוינת.</li></ul><h3>סיכום</h3><p>במודול זה למדנו שתי שיטות חיפוש – אחת פשוטה ואחת חכמה יותר. חיפוש בינארי מציג את הכוח של אלגוריתמים: צמצום דרסטי של זמן הריצה.</p>",
  "examples": [
    "### חיפוש ליניארי",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 1 – חיפוש ליניארי פשוט\nnums = [4, 8, 15, 16, 23, 42]\nprint(linear_search(nums, 15))\n# פלט: 2</code></pre>",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 2 – חיפוש אחר מספר שאינו קיים\nnums = [1, 2, 3, 4]\nprint(linear_search(nums, 7))\n# פלט: -1</code></pre>",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 3 – חיפוש אחר מחרוזת\nwords = [\"שלום\", \"עולם\", \"פייתון\"]\nprint(linear_search(words, \"פייתון\"))\n# פלט: 2</code></pre>",

    "### חיפוש בינארי",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 4 – חיפוש בינארי ברשימה ממוינת\nnums = [2, 4, 6, 8, 10, 12]\nprint(binary_search(nums, 10))\n# פלט: 4</code></pre>",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 5 – איבר שאינו קיים\nnums = [1, 3, 5, 7, 9]\nprint(binary_search(nums, 4))\n# פלט: -1</code></pre>",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 6 – חיפוש מחרוזת ברשימה ממוינת\nwords = [\"אבא\", \"בית\", \"חתול\", \"מחשב\"]\nprint(binary_search(words, \"חתול\"))\n# פלט: 2</code></pre>",

    "### השוואה בין השיטות",
    "<pre style='direction:ltr; text-align:left;'><code># דוגמה 7 – מדידת זמן חיפוש\nimport time\nnums = list(range(1,1000000))\nstart = time.time()\nlinear_search(nums, 999999)\nprint(\"ליניארי:\", time.time()-start)\nstart = time.time()\nbinary_search(nums, 999999)\nprint(\"בינארי:\", time.time()-start)\n# פלט: חיפוש בינארי מהיר בהרבה</code></pre>"
  ],"exercises": [
  {
    "question": "תרגיל 1 – כתוב פונקציה לחיפוש ליניארי ברשימה של מספרים.",
    "solution": "def linear_search(lst, target):\n    for i, num in enumerate(lst):\n        if num == target:\n            return i\n    return -1\n\nprint(linear_search([1,2,3,4,5], 3))  # 2"
  },
  {
    "question": "תרגיל 2 – מצא את האינדקס של שם מסוים ברשימה של מחרוזות באמצעות חיפוש ליניארי.",
    "solution": "names = [\"דנה\", \"יוסי\", \"נועה\", \"איתי\"]\nprint(linear_search(names, \"נועה\"))  # 2"
  },
  {
    "question": "תרגיל 3 – הסבר למה חיפוש ליניארי הוא O(n).",
    "solution": "# חיפוש ליניארי עובר איבר-איבר עד שמוצא (או לא מוצא).\n# במקרה הגרוע ביותר – צריך לבדוק את כל n האיברים.\n# לכן סיבוכיות זמן: O(n)."
  },
  {
    "question": "תרגיל 4 – כתוב פונקציה לחיפוש בינארי ברשימה ממוינת.",
    "solution": "def binary_search(lst, target):\n    left, right = 0, len(lst) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\nprint(binary_search([1,3,5,7,9], 7))  # 3"
  },
  {
    "question": "תרגיל 5 – נסה להריץ חיפוש בינארי על רשימה לא ממוינת. מה קורה?",
    "solution": "# החיפוש יחזיר תוצאה שגויה או -1, כי האלגוריתם מניח שהרשימה ממוינת.\n# דוגמה:\nprint(binary_search([10, 3, 7, 1], 7))  # תוצאה לא צפויה"
  },
  {
    "question": "תרגיל 6 – השווה את זמן הריצה של חיפוש ליניארי ובינארי ברשימה גדולה.",
    "solution": "import time\nlst = list(range(1, 1000001))\n\nstart = time.time()\nlinear_search(lst, 999999)\nend = time.time()\nprint(\"חיפוש ליניארי:\", end - start)\n\nstart = time.time()\nbinary_search(lst, 999999)\nend = time.time()\nprint(\"חיפוש בינארי:\", end - start)"
  },
  {
    "question": "תרגיל 7 – מצא את המקום של מספר 500 ברשימה של 1 עד 1000 בעזרת חיפוש בינארי.",
    "solution": "lst = list(range(1,1001))\nprint(binary_search(lst, 500))  # 499"
  },
  {
    "question": "תרגיל 8 – כתוב פונקציה שמקבלת רשימה ומספר ומחזירה True/False אם המספר קיים (באמצעות חיפוש ליניארי).",
    "solution": "def exists(lst, target):\n    return linear_search(lst, target) != -1\n\nprint(exists([10,20,30], 20))  # True\nprint(exists([10,20,30], 5))   # False"
  },
  {
    "question": "תרגיל 9 – כתוב פונקציה שמחזירה את מספר הצעדים שבוצעו בחיפוש ליניארי לעומת בינארי.",
    "solution": "def linear_steps(lst, target):\n    steps = 0\n    for num in lst:\n        steps += 1\n        if num == target:\n            return steps\n    return steps\n\ndef binary_steps(lst, target):\n    steps = 0\n    left, right = 0, len(lst)-1\n    while left <= right:\n        steps += 1\n        mid = (left+right)//2\n        if lst[mid] == target:\n            return steps\n        elif lst[mid] < target:\n            left = mid+1\n        else:\n            right = mid-1\n    return steps\n\nlst = list(range(1,1001))\nprint(\"ליניארי:\", linear_steps(lst, 999))\nprint(\"בינארי:\", binary_steps(lst, 999))"
  },
  {
    "question": "תרגיל 10 – הסבר במילים פשוטות: מתי כדאי להשתמש בליניארי ומתי בבינארי?",
    "solution": "# חיפוש ליניארי – מתאים כש:\n# - הרשימה קטנה\n# - הרשימה לא ממוינת\n# חיפוש בינארי – מתאים כש:\n# - הרשימה ממוינת\n# - רוצים למצוא איברים במהירות גם ברשימה גדולה (O(log n))"
  }
]
,"quizzes": [
  {
    "title": "שאלון 1 – חיפוש ליניארי",
    "questions": [
      {
        "question": "מה עושה חיפוש ליניארי?",
        "options": ["בודק איבר אמצעי בכל צעד", "עובר איבר אחרי איבר עד שמוצא או עד סוף הרשימה", "מחלק את הרשימה לשניים בכל פעם", "ממיין את הרשימה לפני החיפוש"],
        "answer": 1
      },
      {
        "question": "מה סיבוכיות הזמן של חיפוש ליניארי?",
        "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
        "answer": 2
      },
      {
        "question": "מה הפלט של linear_search([3,7,2,9],7)?",
        "options": ["0", "1", "2", "-1"],
        "answer": 1
      },
      {
        "question": "מה מחזירה הפונקציה linear_search אם האיבר לא נמצא?",
        "options": ["0", "-1", "None", "שגיאה"],
        "answer": 1
      },
      {
        "question": "איזה טיפוס נתונים אפשר לחפש באמצעות חיפוש ליניארי?",
        "options": ["רק מספרים", "רק מחרוזות", "כל טיפוס שניתן להשוות", "רק רשימות"],
        "answer": 2
      },
      {
        "question": "מה הפלט של linear_search([\"שלום\",\"עולם\",\"פייתון\"],\"פייתון\")?",
        "options": ["0", "1", "2", "-1"],
        "answer": 2
      },
      {
        "question": "מה קורה במקרה הגרוע ביותר של חיפוש ליניארי?",
        "options": ["מוצאים תמיד את האיבר הראשון", "בודקים את כל האיברים ברשימה", "לא ניגשים כלל לרשימה", "תמיד מקבלים -1"],
        "answer": 1
      },
      {
        "question": "מה היתרון של חיפוש ליניארי?",
        "options": ["פועל על רשימות לא ממוינות", "תמיד מהיר יותר מחיפוש בינארי", "דורש שהרשימה תהיה ממוינת", "לא צריך לעבור על איברים"],
        "answer": 0
      },
      {
        "question": "מה החיסרון של חיפוש ליניארי?",
        "options": ["לא עובד על רשימות ממוינות", "איטי ברשימות גדולות", "לא מחזיר אינדקס", "מוחק איברים"],
        "answer": 1
      },
      {
        "question": "מה יודפס: linear_search([1,2,3,4],7)?",
        "options": ["3", "4", "-1", "שגיאה"],
        "answer": 2
      }
    ]
  },
  {
    "title": "שאלון 2 – חיפוש בינארי והשוואה",
    "questions": [
      {
        "question": "מה התנאי ההכרחי לשימוש בחיפוש בינארי?",
        "options": ["הרשימה חייבת להיות ממוינת", "הרשימה חייבת להכיל מספרים בלבד", "האיבר המבוקש חייב להיות באמצע", "הרשימה חייבת להיות באורך זוגי"],
        "answer": 0
      },
      {
        "question": "מה סיבוכיות הזמן של חיפוש בינארי?",
        "options": ["O(1)", "O(log n)", "O(n)", "O(n^2)"],
        "answer": 1
      },
      {
        "question": "מה הפלט של binary_search([1,2,3,4,5,6,7,8,9],7)?",
        "options": ["5", "6", "7", "-1"],
        "answer": 1
      },
      {
        "question": "מה הפלט של binary_search([1,3,5,7,9],4)?",
        "options": ["-1", "2", "3", "שגיאה"],
        "answer": 0
      },
      {
        "question": "מה היתרון של חיפוש בינארי על פני ליניארי?",
        "options": ["עובד גם על רשימות לא ממוינות", "הרבה יותר מהיר ברשימות גדולות", "תמיד מחזיר את כל המופעים", "לא דורש תנאי עצירה"],
        "answer": 1
      },
      {
        "question": "מה החיסרון של חיפוש בינארי?",
        "options": ["לא עובד על רשימות ממוינות", "איטי יותר מליניארי", "דורש רשימה ממוינת", "תמיד מחזיר -1"],
        "answer": 2
      },
      {
        "question": "מה קורה בכל צעד של חיפוש בינארי?",
        "options": ["בודקים את כל הרשימה", "מחלקים את הרשימה לשניים ובוחרים חצי אחד", "מחפשים רק את האיבר האחרון", "מוחקים איברים שלא מתאימים"],
        "answer": 1
      },
      {
        "question": "מה יודפס: binary_search([\"אבא\",\"בית\",\"חתול\",\"מחשב\"],\"חתול\")?",
        "options": ["1", "2", "3", "-1"],
        "answer": 1
      },
      {
        "question": "מתי חיפוש ליניארי עדיף על בינארי?",
        "options": ["ברשימות גדולות", "ברשימות לא ממוינות", "תמיד עדיף", "לעולם לא"],
        "answer": 1
      },
      {
        "question": "מה מסביר ההשוואה במודול בין ליניארי לבינארי?",
        "options": ["בינארי מהיר בהרבה על רשימות גדולות", "ליניארי תמיד מהיר יותר", "אין הבדל בין השיטות", "ליניארי עדיף על בינארי תמיד"],
        "answer": 0
      }
    ]
  }
]


}
